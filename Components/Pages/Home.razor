@page "/"
@using Radzen
@using System.IO
@using EZip.Controller
@using EZip.Model

@inject IJSRuntime JSRuntime
@inject IDirectory s_directory
@inject IFile s_file
@inject NotificationService s_notification
@inject EasyLogger s_logger
@inject LocalLanguageService s_languageService

<div style="display: flex; align-items: center; justify-content: space-between; gap: 5px; padding: 10px;">
    <RadzenButton Text="◀ " ButtonStyle="ButtonStyle.Light" Click="GoBack" />
    <RadzenTextBox @bind-Value="currentPath" Placeholder="输入目标路径" Style="flex-grow: 1;" @onkeydown="HandleKeyDown" />
    <RadzenButton Text=@s_languageService.GetString("Home-Confirm") ButtonStyle="ButtonStyle.Primary" Click="() => LoadDirectoryItems(currentPath)" />
</div>

<RadzenNotification />

<hr />

<div style="display: flex; justify-content: space-between; padding: 10px; background-color: #f7f7f7; font-weight: bold; border-bottom: 2px solid #e0e0e0;">
    <div style="flex: 1;">名称</div>
    <div style="flex: 1; text-align: center;">创建时间</div>
    <div style="flex: 1; text-align: center;">更新时间</div>
    <div style="flex: 1; text-align: right;">大小</div>
</div>

@if (directoryItems != null && directoryItems.Any())
{
    <RadzenDataList Data="@directoryItems" TItem="HomeContent" AllowPaging="true" PageSize="8">
        <Template Context="item">
            <div style="display: flex; justify-content: space-between; padding: 10px; border-bottom: 1px solid #e0e0e0; cursor: pointer;"
                 @onclick="() => OnItemClick(item)" ontouchstart="OnTouchStart(event, item)">
                <!-- 文件/目录名称 -->
                <div style="flex: 1;">@item.Content</div>
                <!-- 创建时间 -->
                <div style="flex: 1; text-align: center;">@item.CreateTime.ToString("yyyy/MM/dd HH:mm:ss")</div>
                <!-- 更新时间 -->
                <div style="flex: 1; text-align: center;">@item.UpdateTime.ToString("yyyy/MM/dd HH:mm:ss")</div>
                <!-- 文件大小 -->
                <div style="flex: 1; text-align: right;">
                    @if (item.SizeInMB.HasValue)
                    {
                        @($"{item.SizeInMB.Value:F2} MB")
                    }
                 </div>
            </div>
        </Template>
    </RadzenDataList>
}

@code {
    private List<HomeContent> directoryItems = new List<HomeContent>();
    private Stack<string> pathStack = new Stack<string>();
    string currentPath = "";

    protected override void OnInitialized()
    {
        LoadDirectoryItems(s_directory.NowPath);
        currentPath = s_directory.NowPath;
    }


    /// <summary>
    /// Load the items in the directory
    /// </summary>
    /// <param name="path">Total path</param>
    private void LoadDirectoryItems(string path)
    {
        AppRequest request = new AppRequest
            {
                RequestType = RequestType.k_showDirectory,
                RequestData = path
            };

        if (Directory.Exists(path))
        {
            var appResponseDirectories = s_directory.ShowDirectoryDirectories(request);
            var appResponseFiles = s_directory.ShowDirectoryFiles(request);

            if (appResponseDirectories.IsSuccessful && appResponseFiles.IsSuccessful)
            {
                var directories = appResponseDirectories.ResponseData as IEnumerable<HomeContent> ?? Enumerable.Empty<HomeContent>();
                var files = appResponseFiles.ResponseData as IEnumerable<HomeContent> ?? Enumerable.Empty<HomeContent>();

                directoryItems = directories.Concat(files).ToList();
                currentPath = path;
                if (pathStack.Count == 0)
                {
                    pathStack.Push(path);
                }
                else if (pathStack.Peek() != path)
                {
                    pathStack.Push(path);
                }
            }
            else
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = @s_languageService.GetString("Home-LoadDirectoryFailed"),
                        // maybe should show the program error message
                        Detail = "err message",
                        Duration = 4000
                    });
            }
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-InvalidPath"),
                    Duration = 4000
                });
        }

        StateHasChanged();
    }

    /// <summary>
    /// in the case of pressing the Enter key, change the directory  path
    /// </summary>
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            string message = $"enter event had be call notify pathCount is {pathStack.Count}";

            LoadDirectoryItems(currentPath);

            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = message,
                    Duration = 4000
                });

        }
    }

    /// <summary>
    ///  this function is used to go back to the previous directory
    ///  还有bug,先进行跳转再进行回退，回退到跟路径没提示，不合理
    /// </summary>
    private void GoBack()
    {
        Console.WriteLine($"pathStack count is {pathStack.Count}");
        if (pathStack.Count > 1 )
        {
            pathStack.Pop();

            string previousPath = pathStack.Peek();

            LoadDirectoryItems(previousPath);
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-GoBackFaild"),
                    Duration = 4000
                });
        }
    }

    /// <summary>
    /// 鼠标和触摸屏点击一行时会触发该事件
    /// </summary>
    /// <param name="item"></param>
    private void OnItemClick(HomeContent item)
    {

        if (item.Type == ContentType.k_file)
        {
            var request = new AppRequest
                {
                    RequestType = RequestType.k_openFile,
                    RequestData = item.AbsolutePath
                };

            var response = s_file.OpenFile(request);

            if ( !response.IsSuccessful )
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = response.ErrorMessage,
                        Duration = 4000
                    });
            }
        }

        if (item.Type == ContentType.k_directory)
        {
            if (!string.IsNullOrEmpty(item.AbsolutePath) )
            {
                // s_notification.Notify(new NotificationMessage
                //     {
                //         Severity = NotificationSeverity.Warning,
                //         Summary = item.AbsolutePath,
                //         Duration = 4000
                //     });
                LoadDirectoryItems(item.AbsolutePath);
            }

        }
    }
}
