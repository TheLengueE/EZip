@page "/"
@using Radzen
@using System.IO
@using EZip.Controller
@using EZip.Model

@inject IJSRuntime JSRuntime
@inject IDirectory s_directory
@inject IFile s_file
@inject NotificationService s_notification
@inject EasyLogger s_logger
@inject LocalLanguageService s_languageService

<div style="display: flex; align-items: center; justify-content: space-between; gap: 5px; padding: 10px;">
    <RadzenButton Text="◀ " ButtonStyle="ButtonStyle.Light" Click="GoBack" />
    <RadzenTextBox @bind-Value="currentPath" Placeholder="输入目标路径" Style="flex-grow: 1;" @onkeydown="HandleKeyDown" />
    <RadzenButton Text=@s_languageService.GetString("Home-Confirm") ButtonStyle="ButtonStyle.Primary" Click="() => LoadDirectoryItems(currentPath)" />
</div>

<RadzenNotification />

<hr />

<div style="display: flex; justify-content: space-between; padding: 10px; background-color: #f7f7f7; font-weight: bold; border-bottom: 2px solid #e0e0e0;">
    <div style="flex: 1;">名称</div>
    <div style="flex: 1; text-align: center;">创建时间</div>
    <div style="flex: 1; text-align: center;">更新时间</div>
    <div style="flex: 1; text-align: right;">大小</div>
</div>

<RadzenDataList Data="@items" TItem="HomeContent" AllowPaging="true" PageSize="50">
    <Template Context="item">
        <div style="display: flex; justify-content: space-between; padding: 10px; border-bottom: 1px solid #e0e0e0;">
            <!-- 文件/目录名称 -->
            <div style="flex: 1; font-weight: bold;">
                @item.Content
            </div>
            <!-- 创建时间 -->
            <div style="flex: 1; text-align: center;">
                @item.CreateTime.ToString("yyyy/MM/dd HH:mm:ss")
            </div>
            <!-- 更新时间 -->
            <div style="flex: 1; text-align: center;">
                @item.UpdateTime.ToString("yyyy/MM/dd HH:mm:ss")
            </div>
            <!-- 文件大小 -->
            <div style="flex: 1; text-align: right;">
                @if (item.SizeInMB.HasValue)
                {
                    @($"{item.SizeInMB.Value:F2} MB")
                }
             </div>
        </div>
    </Template>
</RadzenDataList>

@code {

    private List<HomeContent> items = new List<HomeContent>
    {
        new HomeContent
        {
            Content = "File1.txt",
            CreateTime = DateTime.Now.AddDays(-10),
            UpdateTime = DateTime.Now.AddDays(-5),
            SizeInMB = 2.5
        },
        new HomeContent
        {
            Content = "Folder1",
            CreateTime = DateTime.Now.AddDays(-20),
            UpdateTime = DateTime.Now.AddDays(-15),
            SizeInMB = null // 文件夹
        }
    };

    private List<string> directoryItems = new List<string>();
    private Stack<string> pathStack = new Stack<string>();
    string currentPath = "";

    protected override void OnInitialized()
    {
        pathStack.Push(s_directory.NowPath);
        LoadDirectoryItems(s_directory.NowPath);
        currentPath = s_directory.NowPath;
    }


    /// <summary>
    /// Load the items in the directory
    /// </summary>
    /// <param name="path">Total path</param>
    private void LoadDirectoryItems(string path)
    {
        AppRequest request = new AppRequest
            {
                RequestType = RequestType.k_showDirectory,
                RequestData = path
            };

        if (Directory.Exists(path))
        {
            var appResponseDirectories = s_directory.ShowDirectoryDirectories(request);
            var appResponseFiles = s_directory.ShowDirectoryFiles(request);

            if (appResponseDirectories.IsSuccessful && appResponseFiles.IsSuccessful)
            {
                var directories = appResponseDirectories.ResponseData as IEnumerable<string> ?? Enumerable.Empty<string>();
                var files = appResponseFiles.ResponseData as IEnumerable<string> ?? Enumerable.Empty<string>();

                directoryItems = directories.Concat(files).ToList();
                currentPath = path;
                pathStack.Push(path);
            }
            else
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = @s_languageService.GetString("Home-LoadDirectoryFailed"),
                        // maybe should show the program error message
                        Detail = "err message",
                        Duration = 4000
                    });
            }
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-InvalidPath"),
                    Duration = 4000
                });
        }

        StateHasChanged();
    }

    /// <summary>
    /// in the case of pressing the Enter key, change the directory  path
    /// </summary>
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (!string.IsNullOrEmpty(currentPath))
        {
            LoadDirectoryItems(currentPath);
        }
    }

    /// <summary>
    ///  this function is used to go back to the previous directory
    ///  还有bug,先进行跳转再进行回退，回退到跟路径没提示，不合理
    /// </summary>
    private void GoBack()
    {
        if (pathStack.Count > 2 )
        {
            pathStack.Pop();

            string previousPath = pathStack.Peek();

            LoadDirectoryItems(previousPath);
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-GoBackFaild"),
                    Duration = 4000
                });
        }
    }

    /// <summary>
    ///  每一行的选中事件，这个处理函数应该很复杂
    /// </summary>
    /// <param name="item"></param>
    private void OnRowSelect(HomeContent item)
    {
        s_logger.LogInfo($"选中的项: {item.Content}");
    }
}
