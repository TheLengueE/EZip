@page "/"
@using Radzen
@using System.IO
@using EZip.Controller
@using EZip.Model

@*注入JS服务*@
@inject IJSRuntime JSRuntime

@*注入目录操作接口*@
@inject IDirectory s_directory    

@*注入文件操作接口*@
@inject IFile s_file

@*注入通知服务*@
@inject NotificationService s_notification

@*注入日志服务*@
@inject EasyLogger s_logger

@*注入本地化服务*@
@inject LocalLanguageService s_languageService

@*注入压缩解压相关服务*@
@inject ICompress s_compress

@*注入权限管理服务*@
@inject IPermissionHelper s_permission



@*最顶层的div*@
<div>
    @*最上方的路径显示输入栏和路径回退按钮*@
    <div style="display: flex; align-items: center; justify-content: space-between; gap: 5px; padding: 10px;">
        <RadzenButton Text="◀ " ButtonStyle="ButtonStyle.Light" Click="GoBack" />
        <RadzenTextBox @bind-Value="currentPath" Placeholder="输入目标路径" Style="flex-grow: 1;" @onkeydown="HandleKeyDown" />
        <RadzenButton Text=@s_languageService.GetString("Home-Confirm") ButtonStyle="ButtonStyle.Primary" Click="() => LoadDirectoryItems(currentPath)" />
    </div>

    <RadzenNotification />

    <hr />

    @* 开始压缩的按钮 *@
    <div style="padding: 10px;">
        <RadzenButton Text="@compressButtonText" ButtonStyle="ButtonStyle.Primary" Click="ToggleCompressDialog" />
    </div>

    @* 表格包含标题和内容部分 *@
    <div style="flex: 1; overflow-y: auto; max-height: calc(100vh - 150px);">
        @if (directoryItems != null && directoryItems.Any())
        {
            <div style="display: flex; justify-content: space-between; padding: 10px; background-color: #f7f7f7; font-weight: bold; border-bottom: 2px solid #e0e0e0;">
                <div style="flex: 1;">名称</div>
                @* <div style="flex: 1; text-align: center;">创建时间</div> *@
                <div style="flex: 1; text-align: center;">更新时间</div>
                <div style="flex: 1; text-align: right;">大小</div>
            </div>

            <RadzenDataList Data="@directoryItems" TItem="HomeContent" AllowPaging="false" PageSize="8">
                <Template Context="item">
                    <div style="display: flex; justify-content: space-between; padding: 1px; cursor: pointer; background-color: @(selectedItems.Contains(item) ? "#dff0d8" : "transparent");"
                    @onclick="() => OnItemClick(item)" ontouchstart="OnTouchStart(event, item)">

                        <!-- 文件/目录类型图标 -->
                        @if (item.Type == ContentType.k_directory)
                        {
                            @("\ud83d\udcc1")
                        }
                        else if (item.Type == ContentType.k_file)
                        {
                            @("\ud83d\udcc4")
                        }

                        <!-- 文件/目录名称 -->
                        <div style="flex: 1;">@item.Content</div>

                        <!-- 更新时间 -->
                        <div style="flex: 1; text-align: center;">@item.UpdateTime.ToString("yyyy/MM/dd HH:mm:ss")</div>

                        <!-- 文件大小 -->
                        <div style="flex: 1; text-align: right;">
                            @if (item.SizeInMB.HasValue)
                            {
                                @($"{item.SizeInMB.Value:F2} MB")
                            }
                        </div>
                    </div>
                </Template>
            </RadzenDataList>
        }
        else
        {
            <div style="text-align: center; padding: 20px;">暂无数据</div>
        }
    </div>

    @*最顶层的div*@
    @if (showCompressDialog)
    {
        <HomeCompressDialog OnClose="CloseCompressDialog" currentPath="@currentPath" selectedItems="@selectedItems" />
    }

    @*模态窗口*@
</div>


@code {
    // 主页面使用到的变量
    private List<HomeContent> directoryItems = new List<HomeContent>();  // 当前目录下的所有项目，包括文件和目录
    private Stack<string> pathStack = new Stack<string>();  // 用于记录路径的栈
    private List<HomeContent> selectedItems = new(); // 已选中的项目
    private string compressButtonText = "选择压缩项目"; // 按钮文本
    private bool isCompressMode = false; // 当前是否处于选择压缩项目模式
    string currentPath = "";  // 当前路径

    bool showCompressDialog = false; // 是否显示模态窗口

    // 框架自带的初始化函数
    protected override async Task OnInitializedAsync()
    {
        await s_permission.RequestDocumentPermissionAsync();

        LoadDirectoryItems(s_directory.NowPath);

        currentPath = s_directory.NowPath;
    }

    // 传入一个路径，加载该路径下的所有文件和目录
    private void LoadDirectoryItems(string path)
    {
        isCompressMode = false;
        compressButtonText = "选择压缩项目";
        selectedItems.Clear(); // 清空之前的选择

        // 目录不存在时，显示警告信息然后返回
        if (!Directory.Exists(path))
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-InvalidPath"),
                    Duration = 4000
                });
            return;
        }

        // 构造更新目录的请求
        AppRequest request = new AppRequest
            {
                RequestType = RequestType.k_showDirectory,
                RequestData = path
            };

        // 获取目录下的所有文件和目录
        var appResponseDirectories = s_directory.ShowDirectoryDirectories(request);
        var appResponseFiles = s_directory.ShowDirectoryFiles(request);

        // 目录和文件加载成功时，将结果合并并显示
        if (appResponseDirectories.IsSuccessful && appResponseFiles.IsSuccessful)
        {
            var directories = appResponseDirectories.ResponseData as IEnumerable<HomeContent> ?? Enumerable.Empty<HomeContent>();
            var files = appResponseFiles.ResponseData as IEnumerable<HomeContent> ?? Enumerable.Empty<HomeContent>();

            directoryItems = directories.Concat(files).ToList();
            currentPath = path;
            if (pathStack.Count == 0)
            {
                pathStack.Push(path);
            }
            else if (pathStack.Peek() != path)
            {
                pathStack.Push(path);
            }
        }
        else  // 如果加载失败，显示错误信息
        {
            s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = appResponseDirectories.ErrorMessage+appResponseFiles.ErrorMessage,
                        Duration = 4000
                    });
        }
        StateHasChanged();
    }

    // ToDo: 处理键盘输入事件,这里只处理回车事件,用于处理回车改变目录
    // 当前回车没有实际作用，只是用于测试
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            string message = $"enter event had be call notify pathCount is {pathStack.Count}";

            LoadDirectoryItems(currentPath);

            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = message,
                    Duration = 4000
                });
        }
    }

    // 返回上一次的目录
    private void GoBack()
    {
        if (pathStack.Count > 1 )
        {
            pathStack.Pop();
            string previousPath = pathStack.Peek();
            LoadDirectoryItems(previousPath);
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-GoBackFaild"),
                    Duration = 4000
                });
        }
    }

    // 点击某个项目时的处理函数
    private void OnItemClick(HomeContent item)
    {
        // 如果当前处于选择模式，点击项目时，选择或取消选择
        if (isCompressMode)
        {
            if (selectedItems.Contains(item))
            {
                selectedItems.Remove(item); // 取消选择
            }
            else
            {
                selectedItems.Add(item); // 选择
            }

            StateHasChanged(); // 重新渲染以显示高亮
            return;
        }

        // 解压压缩文件
        if (item.Type == ContentType.k_compress)
        {
            if (string.IsNullOrEmpty(item.AbsolutePath))
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "压缩文件路径无效",
                        Duration = 4000
                    });
                return;
            }

            HomeUnpackMessage homeUnpackMessage = new HomeUnpackMessage
                {
                    ArchivePath = item.AbsolutePath,
                    OutputPath = currentPath
                };
            var request = new AppRequest
                {
                    RequestType = RequestType.k_k_unpackFile,
                    RequestData =  homeUnpackMessage
                };
            var response = s_compress.UnpackArchive(request);

            s_notification.Notify(new NotificationMessage
                {
                    Severity = response.IsSuccessful ? NotificationSeverity.Success : NotificationSeverity.Error,
                    Summary = response.IsSuccessful ? @s_languageService.GetString("Home-UnpackSuccess") : response.ErrorMessage,
                    Duration = 4000
                });

            if (response.IsSuccessful)
            {
                LoadDirectoryItems(currentPath);
            }
        }

        // 直接打开文件
        if (item.Type == ContentType.k_file)
        {
            var request = new AppRequest
                {
                    RequestType = RequestType.k_openFile,
                    RequestData = item.AbsolutePath
                };

            var response = s_file.OpenFile(request);

            if ( !response.IsSuccessful )
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = response.ErrorMessage,
                        Duration = 4000
                 });
            }
        }

        // 打开一个目录
        if (item.Type == ContentType.k_directory)
        {
            if (string.IsNullOrEmpty(item.AbsolutePath))
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "压缩文件路径无效",
                        Duration = 4000
                    });
                return;
            }
            LoadDirectoryItems(item.AbsolutePath);
        }
    }

    //// <summary>
    /// 压缩窗口按钮的点击事件，会在点击时进入选择模式，
    /// 在选择模式下进行点击会展示压缩模态窗口进一步完成压缩操作
    /// </summary>
    private void ToggleCompressDialog()
    {
        if (!isCompressMode)
        {
            // 进入选择模式
            isCompressMode = true;
            compressButtonText = "开始压缩";
            selectedItems.Clear(); // 清空之前的选择
        }
        else
        {
            showCompressDialog = true;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 压缩模态窗口关闭事件，
    /// 已经绑定到模态窗口的关闭按钮上了
    /// </summary>
    void CloseCompressDialog()
    {
        showCompressDialog = false;

        // 关闭弹窗并将选择模式关闭
        isCompressMode = false;
        compressButtonText = "选择压缩项目";
        selectedItems.Clear(); // 清空之前的选择

        LoadDirectoryItems(currentPath);
        StateHasChanged();
    }


}
