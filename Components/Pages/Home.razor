@page "/"
@using Radzen
@using System.IO
@using EZip.Controller
@using EZip.Model

@inject IJSRuntime JSRuntime
@inject IDirectory s_directory
@inject IFile s_file
@inject NotificationService s_notification
@inject EasyLogger s_logger
@inject LocalLanguageService s_languageService
@inject WindowsCompress s_windowsCompress


@*最顶层的div*@
<div>
    @*最上方的路径显示输入栏和路径回退按钮*@
    <div style="display: flex; align-items: center; justify-content: space-between; gap: 5px; padding: 10px;">
        <RadzenButton Text="◀ " ButtonStyle="ButtonStyle.Light" Click="GoBack" />
        <RadzenTextBox @bind-Value="currentPath" Placeholder="输入目标路径" Style="flex-grow: 1;" @onkeydown="HandleKeyDown" />
        <RadzenButton Text=@s_languageService.GetString("Home-Confirm") ButtonStyle="ButtonStyle.Primary" Click="() => LoadDirectoryItems(currentPath)" />
    </div>

    <RadzenNotification />

    <hr />

    @* 开始压缩的按钮 *@
    <div style="padding: 10px;">
        <RadzenButton Text="@compressButtonText" ButtonStyle="ButtonStyle.Primary" Click="ToggleCompressMode" />
    </div>

    @* 表格包含标题和内容部分 *@
    <div style="flex: 1; overflow-y: auto; max-height: calc(100vh - 150px);">
        @if (directoryItems != null && directoryItems.Any())
        {
            <div style="display: flex; justify-content: space-between; padding: 10px; background-color: #f7f7f7; font-weight: bold; border-bottom: 2px solid #e0e0e0;">
                <div style="flex: 1;">名称</div>
                @* <div style="flex: 1; text-align: center;">创建时间</div> *@
                <div style="flex: 1; text-align: center;">更新时间</div>
                <div style="flex: 1; text-align: right;">大小</div>
            </div>

            <RadzenDataList Data="@directoryItems" TItem="HomeContent" AllowPaging="false" PageSize="8">
                <Template Context="item">
                    <div style="display: flex; justify-content: space-between; padding: 1px; cursor: pointer; background-color: @(selectedItems.Contains(item) ? "#dff0d8" : "transparent");"
                    @onclick="() => OnItemClick(item)" ontouchstart="OnTouchStart(event, item)">

                        <!-- 文件/目录类型图标 -->
                        @if (item.Type == ContentType.k_directory)
                        {
                            @("\ud83d\udcc1")
                        }
                        else if (item.Type == ContentType.k_file)
                        {
                            @("\ud83d\udcc4")
                        }

                        <!-- 文件/目录名称 -->
                        <div style="flex: 1;">@item.Content</div>

                        <!-- 更新时间 -->
                        <div style="flex: 1; text-align: center;">@item.UpdateTime.ToString("yyyy/MM/dd HH:mm:ss")</div>

                        <!-- 文件大小 -->
                        <div style="flex: 1; text-align: right;">
                            @if (item.SizeInMB.HasValue)
                            {
                                @($"{item.SizeInMB.Value:F2} MB")
                            }
                        </div>
                    </div>
                </Template>
            </RadzenDataList>
        }
        else
        {
            <div style="text-align: center; padding: 20px;">暂无数据</div>
        }
    </div>

    @*最顶层的div*@
    @if (showDialog)
    {
        <div style="position: absolute;
                top: 0; left: 0;
                width: 100%; height: 100%;
                background: rgba(0, 0, 0, 0.5);
                display: flex;
                align-items: center;
                justify-content: center;">

            <!-- 弹窗本体 -->
            <div style="background: white;
                    padding: 20px;
                    border-radius: 6px;
                    width: 100%;
                    max-width: 640px;">
                <!-- 限制弹窗最大宽度 -->

                <RadzenCard Style="max-width:600px; margin:20px auto;">
                    <ChildContent>
                        <!-- 输入框用于输入压缩文件名字 -->
                        <RadzenTextBox @bind-Value="@compressFileName" Placeholder="输入压缩文件名字" Style="width: 100%; margin-bottom: 20px;" />

                        <!-- 单选项选择框用于选择压缩格式 -->
                        <RadzenDropDown @bind-Value="@selectedFormat" Data="@compressionFormats" Placeholder="选择压缩格式" Style="width: 100%; margin-bottom: 20px;" />

                        <!-- 按钮区域 -->
                        <div style="display: flex; justify-content: flex-end; gap: 10px;">
                            <RadzenButton Text="关闭" Click="CloseModal" ButtonStyle="ButtonStyle.Secondary" />
                            <RadzenButton Text="压缩" Click="ConfirmCompress" ButtonStyle="ButtonStyle.Primary" />
                        </div>
                    </ChildContent>
                </RadzenCard>

            </div>
        </div>
    }
</div>


@code {
    private List<HomeContent> directoryItems = new List<HomeContent>();
    private Stack<string> pathStack = new Stack<string>();
    private List<HomeContent> selectedItems = new(); // 已选中的项目
    private string compressButtonText = "选择压缩项目"; // 按钮文本
    private bool isCompressMode = false; // 当前是否处于选择压缩项目模式
    string currentPath = "";

    private bool showDialog = false;
    private string selectedFormat = "ZIP";  // 单选时用 string 类型来存储一个压缩格式
    private string compressFileName = "";
    private List<string> compressionFormats = new List<string> { "ZIP", "7Z", "TAR" };

    // 在弹窗中确定压缩文件
    private void ConfirmCompress()
    {
        string[] contents = selectedItems
        .Select(item => currentPath + item.Content)
        .ToArray();

        if (compressFileName is null) { 
            compressFileName = "output.zip";
        }

        string outputFilePath = Path.Combine(currentPath, compressFileName);

        HomeCompressMessage homeCompressMessage = new HomeCompressMessage
            {
                CompressPath = contents,
                OutputFilePath = outputFilePath,
                // compressType = CompressType.k_zip
            };

        if (selectedFormat == "ZIP")
        {
            homeCompressMessage.compressType= CompressType.k_zip;
            homeCompressMessage.OutputFilePath = outputFilePath + ".zip";
        }
        else if (selectedFormat == "7Z")
        {
            homeCompressMessage.compressType = CompressType.k_sevenzip;
            homeCompressMessage.OutputFilePath = outputFilePath + ".7z";
        }
        else if (selectedFormat == "TAR")
        {
            homeCompressMessage.compressType = CompressType.k_tar;
            homeCompressMessage.OutputFilePath = outputFilePath + ".tar";
        }

        AppRequest request = new AppRequest
            {
                RequestType = RequestType.k_compressFile,
                RequestData = homeCompressMessage
            };

        // 开始压缩操作
        var response =  s_windowsCompress.CompressFile(request);

        isCompressMode = false;
        compressButtonText = "选择压缩项目";
        selectedItems.Clear(); // 清空之前的选择

        if (response.IsSuccessful)
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = @s_languageService.GetString("Home-CompressSuccess"),
                    Duration = 4000
                });
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = response.ErrorMessage,
                    Duration = 4000
                });
        }

        CloseModal();

        compressFileName = "";

        StateHasChanged();
    }

    // 关闭弹窗
    private void CloseModal()
    {
        showDialog = false;
    }

    // 框架自带的初始化函数
    protected override void OnInitialized()
    {
        LoadDirectoryItems(s_directory.NowPath);
        currentPath = s_directory.NowPath;
    }

    /// <summary>
    /// Load the items in the directory
    /// </summary>
    /// <param name="path">Total path</param>
    private void LoadDirectoryItems(string path)
    {
        isCompressMode = false;
        compressButtonText = "选择压缩项目";
        selectedItems.Clear(); // 清空之前的选择

        AppRequest request = new AppRequest
            {
                RequestType = RequestType.k_showDirectory,
                RequestData = path
            };

        if (Directory.Exists(path))
        {
            var appResponseDirectories = s_directory.ShowDirectoryDirectories(request);

            var appResponseFiles = s_directory.ShowDirectoryFiles(request);

            if (appResponseDirectories.IsSuccessful && appResponseFiles.IsSuccessful)
            {
                var directories = appResponseDirectories.ResponseData as IEnumerable<HomeContent> ?? Enumerable.Empty<HomeContent>();

                var files = appResponseFiles.ResponseData as IEnumerable<HomeContent> ?? Enumerable.Empty<HomeContent>();

                // int count = files.Count();
                // s_notification.Notify(new NotificationMessage
                //     {
                //         Severity = NotificationSeverity.Info,
                //         Summary =$"file get success,there are {count} file",
                //         Detail = "err message",
                //         Duration = 4000
                //     });

                directoryItems = directories.Concat(files).ToList();
                currentPath = path;
                if (pathStack.Count == 0)
                {
                    pathStack.Push(path);
                }
                else if (pathStack.Peek() != path)
                {
                    pathStack.Push(path);
                }
            }
            else
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = @s_languageService.GetString("Home-LoadDirectoryFailed"),
                        // maybe should show the program error message
                        Detail = "err message",
                        Duration = 4000
                    });
            }
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-InvalidPath"),
                    Duration = 4000
                });
        }

        StateHasChanged();
    }

    /// <summary>
    /// in the case of pressing the Enter key, change the directory  path
    /// </summary>
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            string message = $"enter event had be call notify pathCount is {pathStack.Count}";

            LoadDirectoryItems(currentPath);

            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = message,
                    Duration = 4000
                });

        }
    }

    /// <summary>
    ///  this function is used to go back to the previous directory
    /// </summary>
    private void GoBack()
    {
        if (pathStack.Count > 1 )
        {
            pathStack.Pop();

            string previousPath = pathStack.Peek();

            LoadDirectoryItems(previousPath);
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @s_languageService.GetString("Home-GoBackFaild"),
                    Duration = 4000
                });
        }
    }

    /// <summary>
    /// 鼠标和触摸屏点击一行时会触发该事件
    /// </summary>
    /// <param name="item"></param>
    private void OnItemClick(HomeContent item)
    {
        if (isCompressMode)
        {
            if (selectedItems.Contains(item))
            {
                selectedItems.Remove(item); // 取消选择
            }
            else
            {
                selectedItems.Add(item); // 选择
            }

            StateHasChanged(); // 重新渲染以显示高亮
            return;
        }

        // 解压压缩文件
        if (item.Type == ContentType.k_compress)
        {
            HomeUnpackMessage homeUnpackMessage = new HomeUnpackMessage
                {
                    ArchivePath = item.AbsolutePath,
                    OutputPath = currentPath
                };
            var request = new AppRequest
                {
                    RequestType = RequestType.k_k_unpackFile,
                    RequestData =  homeUnpackMessage
                };

            var response = s_windowsCompress.UnpackArchive(request);

            if (response.IsSuccessful)
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = @s_languageService.GetString("Home-UnpackSuccess"),
                        Duration = 4000
                    });
            }
            else
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = response.ErrorMessage,
                        Duration = 4000
                    });
            }
        }

        // 直接打开文件
        if (item.Type == ContentType.k_file)
        {
            var request = new AppRequest
                {
                    RequestType = RequestType.k_openFile,
                    RequestData = item.AbsolutePath
                };

            var response = s_file.OpenFile(request);

            if ( !response.IsSuccessful )
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = response.ErrorMessage,
                        Duration = 4000
                    });
            }
        }

        // 打开一个目录
        if (item.Type == ContentType.k_directory)
        {
            if (!string.IsNullOrEmpty(item.AbsolutePath) )
            {
                // s_notification.Notify(new NotificationMessage
                //     {
                //         Severity = NotificationSeverity.Warning,
                //         Summary = item.AbsolutePath,
                //         Duration = 4000
                //     });
                LoadDirectoryItems(item.AbsolutePath);
            }
        }
        LoadDirectoryItems(currentPath);
    }

    /// <summary>
    /// 切换压缩模式
    /// </summary>
    private void ToggleCompressMode()
    {
        if (!isCompressMode)
        {
            // 进入选择模式
            isCompressMode = true;
            compressButtonText = "开始压缩";
            selectedItems.Clear(); // 清空之前的选择
        }
        else
        {
            showDialog = true;
            StateHasChanged();
            return;
        }
    }

    private void UnpackMode(HomeContent item)
    {
        
    }
}
