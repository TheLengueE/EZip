@page "/"
@using Radzen
@using System.IO
@using EZip.Controller
@using EZip.Model

@inject IJSRuntime JSRuntime
@inject IDirectory s_directory
@inject IFile s_file
@inject NotificationService s_notification
@inject EasyLogger s_logger
@inject LocalLanguageService languageService


<div style="display: flex; align-items: center; justify-content: space-between; gap: 5px; padding: 10px;">
    <RadzenButton Text="◀ " ButtonStyle="ButtonStyle.Light" Click="GoBack" />
    <RadzenTextBox @bind-Value="currentPath" Placeholder="输入目标路径" Style="flex-grow: 1;" @onkeydown="HandleKeyDown" />
    <RadzenButton Text=@languageService.GetString("Home-Confirm") ButtonStyle="ButtonStyle.Primary" Click="() => LoadDirectoryItems(currentPath)" />
</div>

<RadzenNotification />

<hr />

@if (directoryItems != null)
{
    <h3>当前目录下的内容：</h3>
    <ul>
        @foreach (var item in directoryItems)
        {
            <li>@item</li>
        }
    </ul>
}
else
{
    <p>加载目录失败，或当前目录为空。</p>
}

@code {
    private List<string> directoryItems = new List<string>();
    private Stack<string> pathStack = new Stack<string>();
    string currentPath = "";

    protected override void OnInitialized()
    {
        pathStack.Push(s_directory.NowPath);
        LoadDirectoryItems(s_directory.NowPath);
        currentPath = s_directory.NowPath;
    }

    /// <summary>
    /// Load the items in the directory
    /// </summary>
    /// <param name="path">Total path</param>
    private void LoadDirectoryItems(string path)
    {
        AppRequest request = new AppRequest
            {
                RequestType = RequestType.k_showDirectory,
                RequestData = path
            };

        if (Directory.Exists(path))
        {
            var appResponseDirectories = s_directory.ShowDirectoryDirectories(request);
            var appResponseFiles = s_directory.ShowDirectoryFiles(request);

            if (appResponseDirectories.IsSuccessful && appResponseFiles.IsSuccessful)
            {
                var directories = appResponseDirectories.ResponseData as IEnumerable<string> ?? Enumerable.Empty<string>();
                var files = appResponseFiles.ResponseData as IEnumerable<string> ?? Enumerable.Empty<string>();

                directoryItems = directories.Concat(files).ToList();
                currentPath = path;
                pathStack.Push(path);
            }
            else
            {
                s_notification.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = @languageService.GetString("Home-LoadDirectoryFailed"),
                        // maybe should show the program error message
                        Detail = "err message",
                        Duration = 4000
                    });
            }
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @languageService.GetString("Home-InvalidPath"),
                    Duration = 4000
                });
        }

        StateHasChanged();
    }

    /// <summary>
    /// in the case of pressing the Enter key, change the directory  path
    /// </summary>
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (!string.IsNullOrEmpty(currentPath))
        {
            LoadDirectoryItems(currentPath);
        }
    }

    /// <summary>
    ///  this function is used to go back to the previous directory
    ///  还有bug,先进行跳转再进行回退，回退到跟路径没提示，不合理
    /// </summary>
    private void GoBack()
    {
        if (pathStack.Count > 2 )
        {
            pathStack.Pop();

            string previousPath = pathStack.Peek();

            LoadDirectoryItems(previousPath);
        }
        else
        {
            s_notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = @languageService.GetString("Home-GoBackFaild"),
                    Duration = 4000
                });
        }
    }
}
